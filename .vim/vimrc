" ~/.vim/vimrc

if !exists('$VIM_CONFIG_HOME')
  let $VIM_CONFIG_HOME = xdg#ConfigHome() . '/vim'
endif
set runtimepath^=$VIM_CONFIG_HOME runtimepath+=$VIM_CONFIG_HOME/after

runtime bundle/pathogen/autoload/pathogen.vim
silent! execute pathogen#infect()

if !exists('$VIM_STATE_HOME')
  let $VIM_STATE_HOME = xdg#StateHome() . '/vim'
endif
call os#MkdirAll($VIM_STATE_HOME, 0700)

set fileencodings=ucs-bom,utf-8,koi8-r

set cpoptions-=a cpoptions-=A

set incsearch
set ignorecase smartcase

set tags=./tags;,tags
set nocscopetag

set scrolloff=1
if exists('+breakindent')
  set breakindent
endif
set showbreak=...
set sidescroll=1 sidescrolloff=5
set display=lastline
set cmdheight=2
set lazyredraw
set listchars=eol:$,tab:>-,extends:>,precedes:<,nbsp:~

set hlsearch
set spelllang=en_us,ru_yo

set laststatus=2
set statusline=%n\ %<%.20f\ %h%m%r%{statusline#Flags()}%=%-14.(%l,%c%V%)\ %P

set tabline=%!tabline#()

set notitle

set noshowcmd
if has#('patch-8.1.1270')
  set shortmess-=S
endif
set confirm
set visualbell t_vb=

set undofile
set undodir=$VIM_STATE_HOME/undo// | call os#MkdirAll(&undodir, 0700)
set backspace=indent,eol,start
set formatoptions+=l1
if has#('patch-7.3.541')
  set formatoptions+=j
endif
set complete-=i complete-=t
set completeopt-=preview
set nrformats-=octal

set shiftwidth=4 softtabstop=4
set expandtab
set autoindent
set lispwords-=if

set nomodeline
if exists('+fixendofline')
  set nofixendofline
endif
set autowrite
set autoread

set directory=$VIM_STATE_HOME/swap// | call os#MkdirAll(&directory, 0700)

set history=1000
set wildmode=longest:full,full
if exists('+wildignorecase')
  set wildignorecase
endif
set wildmenu
set wildoptions=tagfile

if executable('ack')
  set grepprg=ack\ --with-filename\ --column
  set grepformat^=%f:%l:%c:%m
endif

set keymap=russian
set iminsert=0 imsearch=-1

set virtualedit=block
set sessionoptions-=options
set viewoptions-=options
set viewdir=$VIM_STATE_HOME/view | call os#MkdirAll(&viewdir, 0700)
set viminfo=!,'100,<50,s10,h,n$VIM_STATE_HOME/viminfo

filetype plugin indent on

if !exists('g:syntax_on')
  syntax enable
endif

colorscheme mine

let g:statusline#flags =
    \ ['FugitiveStatusline', 'ALEStatuslineFlag', 'SyntasticStatuslineFlag']

let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1

let g:user_emmet_leader_key = '<C-\>'

let g:lion_squeeze_spaces = 1

let g:netrw_home        = $VIM_STATE_HOME
let g:netrw_bufsettings = 'noma nomod nonu nobl nowrap ro rnu'
let g:netrw_banner      = 0
let g:netrw_timefmt     = '%a %d %b %Y %H:%M:%S'

let g:sneak#map_netrw = 0

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_stl_format  = '[!]'

let g:vdebug_options = {}
let g:vdebug_options.watch_window_style = 'compact'
let g:vdebug_options.marker_default     = '*'
let g:vdebug_options.marker_closed_tree = '+'
let g:vdebug_options.marker_open_tree   = '-'
let g:vdebug_options.sign_breakpoint    = 'B>'
let g:vdebug_options.sign_current       = '->'
let g:vdebug_options.continuous_mode    = 1
let g:vdebug_options.simplified_status  = 0

if has#('digraphs')
  " HORIZONTAL ELLIPSIS.
  digraphs ,. 8230
endif

let g:mapleader = ','

nmap <Leader>,  <Plug>Sneak_,
omap <Leader>,  <Plug>Sneak_,
xmap <Leader>,  <Plug>Sneak_,

" Just for the case when Sneak isn't installed ...
nnoremap <Plug>Sneak_,  ,
onoremap <Plug>Sneak_,  ,
xnoremap <Plug>Sneak_,  ,

cnoremap <C-X>n  <Down>
cnoremap <C-X>p  <Up>

inoremap <C-U>  <C-G>u<C-U>
inoremap <C-W>  <C-G>u<C-W>

nnoremap +  <C-W>+
nnoremap _  <C-W>-

nnoremap -  :<C-U>Explore<CR>

nnoremap <BS>  <C-^>

nnoremap <Space>  <C-F>

nnoremap <C-J>  gT
nnoremap <C-K>  gt

nnoremap <silent> <C-L>  :<C-U>nohlsearch<CR><C-L>

nnoremap Q  @q

nnoremap <expr> j  v:count ? 'j' : 'gj'
nnoremap <expr> k  v:count ? 'k' : 'gk'

nnoremap <Leader>b  :<C-U>buffers<CR>
nnoremap <Leader>x  :<C-U>bdelete<CR>

nnoremap <Leader>m  :<C-U>marks<CR>
nnoremap <Leader>r  :<C-U>registers<CR>

nnoremap <Leader>tt  :<C-U>TestNearest<CR>
nnoremap <Leader>tf  :<C-U>TestFile<CR>
nnoremap <Leader>ts  :<C-U>TestSuite<CR>
nnoremap <Leader>tl  :<C-U>TestLast<CR>
nnoremap <Leader>tg  :<C-U>TestVisit<CR>

" Toggle 'paste' only in Insert mode.
set pastetoggle=<C-_>
noremap <C-_>  <Nop>

augroup vimrc_paste
  autocmd!
  autocmd InsertLeave *  set nopaste
augroup END

augroup vimrc_undofile
  autocmd!
  autocmd BufWritePre {,/usr,/var}/tmp/*  setlocal noundofile
augroup END

if exists('#fedora')
  autocmd! fedora BufReadPost *
endif
