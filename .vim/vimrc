" ~/.vim/vimrc

let $VIM_CONFIG_HOME = xdg#ConfigHome() . '/vim'

" Place for local plugins and overrides.
set runtimepath^=$VIM_CONFIG_HOME
set runtimepath+=$VIM_CONFIG_HOME/after

runtime bundle/pathogen/autoload/pathogen.vim
if exists('*pathogen#infect')
  execute pathogen#infect('bundle/{}')
endif

let $VIM_STATE_HOME = xdg#StateHome() . '/vim'
call os#MkdirAll($VIM_STATE_HOME, 0700)

set cpoptions-=a cpoptions-=A

set incsearch
set ignorecase smartcase

set tags=./tags;,tags

set scrolloff=1
if exists('+breakindent')
  set breakindent
endif
set showbreak=...
set sidescroll=1 sidescrolloff=5
set display=lastline
set cmdheight=2
set lazyredraw
set listchars=eol:$,tab:>-,extends:>,precedes:<,nbsp:~

set hlsearch
set spelllang=en_us,ru_yo

set laststatus=2
set statusline=%n\ %<%.20f\ %h%m%r%{statusline#Flags()}%=%-14.(%l,%c%V%)\ %P

set tabline=%!tabline#()

set notitle

if has#('patch-8.1.1270')
  set shortmess-=S
endif
set confirm
set visualbell t_vb=

set undofile
set undodir=$VIM_STATE_HOME/undo// | call os#MkdirAll(&undodir, 0700)
set backspace=indent,eol,start
set formatoptions+=l1
if has#('patch-7.3.541')
  set formatoptions+=j
endif
set complete-=i complete-=t
set completeopt-=preview
set nrformats-=octal

set shiftwidth=4 softtabstop=4
set expandtab
set autoindent
set lispwords-=if

set nomodeline
if exists('+fixendofline')
  set nofixendofline
endif
set autowrite
set autoread

set directory=$VIM_STATE_HOME/swap// | call os#MkdirAll(&directory, 0700)

set history=1000
set wildmode=longest:full,full
if exists('+wildignorecase')
  set wildignorecase
endif
set wildmenu
set wildoptions=tagfile

if executable('ack')
  set grepprg=ack\ --with-filename\ --column
  set grepformat^=%f:%l:%c:%m
endif

set keymap=russian
set iminsert=0 imsearch=-1

set fileencodings=ucs-bom,utf-8,koi8-r

set virtualedit=block
set sessionoptions-=options
set viewoptions-=options
set viewdir=$VIM_STATE_HOME/view | call os#MkdirAll(&viewdir, 0700)
set viminfo+=!,n$VIM_STATE_HOME/viminfo

" modifyOtherKeys breaks <C-_> mapping in xterm.
set t_TI= t_TE=

filetype plugin indent on

if !exists('g:syntax_on')
  syntax enable
endif

colorscheme mine

" ftplugin/go/fmt.vim
if executable('goimports')
  let g:gofmt_command = 'goimports'
endif

" indent/html.vim
let g:html_indent_script1  = 'auto'
let g:html_indent_style1   = 'auto'
let g:html_indent_autotags = 'html'

" indent/vim.vim
let g:vim_indent_cont = 4

" syntax/c.vim
let g:c_no_curly_error = 1

" syntax/go.vim
let g:go_highlight_trailing_whitespace_error = 0

" syntax/html.vim
let g:html_no_rendering = 1

" syntax/perl.vim
let g:perl_include_pod = 0

" syntax/sh.vim
let g:sh_no_error = 1

" syntax/vim.vim
let g:vimsyn_noerror = 1

let g:statusline#flags =
    \ ['FugitiveStatusline', 'ALEStatuslineFlag', 'SyntasticStatuslineFlag']

let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1

" Use the same signs as syntastic does.
let g:ale_sign_error         = '>>'
let g:ale_sign_style_error   = 'S>'
let g:ale_sign_warning       = '>>'
let g:ale_sign_style_warning = 'S>'

" Sort dotfiles properly and group directories first.
let g:dirvish_mode = ':sort | sort #\v.*/|\ze#'
let g:dirvish_relative_paths = !has#('conceal')

let g:user_emmet_leader_key = '<C-\>'

let g:lion_squeeze_spaces = 1

let g:netrw_home        = $VIM_STATE_HOME
let g:netrw_bufsettings = 'noma nomod nonu nobl nowrap ro rnu'
let g:netrw_banner      = 0
let g:netrw_timefmt     = '%a %d %b %Y %H:%M:%S'

let g:sneak#map_netrw = 0

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_stl_format  = '[!]'

let g:test#runner_commands = ['CommonTest']

let g:vdebug_options = {}
let g:vdebug_options.watch_window_style = 'compact'
let g:vdebug_options.marker_default     = '*'
let g:vdebug_options.marker_closed_tree = '+'
let g:vdebug_options.marker_open_tree   = '-'
let g:vdebug_options.sign_breakpoint    = 'B>'
let g:vdebug_options.sign_current       = '->'
let g:vdebug_options.continuous_mode    = 1
let g:vdebug_options.simplified_status  = 0

if has#('digraphs')
  " HORIZONTAL ELLIPSIS.
  digraphs ,. 8230
endif

let g:mapleader = ','

nmap <Leader>,  <Plug>Sneak_,
omap <Leader>,  <Plug>Sneak_,
xmap <Leader>,  <Plug>Sneak_,

" Just for the case when Sneak isn't installed ...
nnoremap <Plug>Sneak_,  ,
onoremap <Plug>Sneak_,  ,
xnoremap <Plug>Sneak_,  ,

cnoremap <C-X>n  <Down>
cnoremap <C-X>p  <Up>

nnoremap +  <C-W>+
nnoremap _  <C-W>-

nnoremap <BS>  <C-^>

nnoremap <Space>  <C-F>

nnoremap <C-J>  gT
nnoremap <C-K>  gt

nnoremap <silent> <C-L>  :<C-U>nohlsearch<CR><C-L>

nnoremap Q  @q

nnoremap <expr> j  v:count ? 'j' : 'gj'
nnoremap <expr> k  v:count ? 'k' : 'gk'

nnoremap <Leader>b  :<C-U>buffers<CR>
nnoremap <Leader>B  :<C-U>buffers!<CR>
nnoremap <Leader>x  :<C-U>bdelete<CR>

nnoremap <Leader>m  :<C-U>marks<CR>
nnoremap <Leader>r  :<C-U>registers<CR>

nnoremap <Leader>tt  :<C-U>TestNearest<CR>
nnoremap <Leader>tf  :<C-U>TestFile<CR>
nnoremap <Leader>ts  :<C-U>TestSuite<CR>
nnoremap <Leader>tl  :<C-U>TestLast<CR>
nnoremap <Leader>tg  :<C-U>TestVisit<CR>

" Toggle 'paste' only in Insert mode.
set pastetoggle=<C-_>
noremap <C-_>  <Nop>

augroup vimrc_paste
  autocmd!
  autocmd InsertLeave *  set nopaste
augroup END

augroup vimrc_undofile
  autocmd!
  autocmd BufWritePre {,/usr,/var}/tmp/*  setlocal noundofile
augroup END
